{"version":3,"file":"cms.19357e6517da542b18e6.hot-update.js","sources":["webpack:///./src/components/Menu/index.js"],"sourcesContent":["import React, { useState, useContext }  from 'react';\nimport MenuItem from './MenuItem';\nimport style from './index.module.css';\nimport { Location } from '@reach/router';\nimport MenuToggle from '../MenuToggle';\nimport cx from 'classnames'\nimport { createBreakpoint } from \"react-use\";\nimport AnimationContainer from '../../utils/AnimationCointainer';\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport _ from 'lodash';\nimport { globalHistory } from \"@reach/router\"\nimport { GlobalDispatchContext,GlobalStateContext } from \"../../context/GlobalContextProvider\"\n\n\nconst Menu = ({currentDirectory}) => {\n\n  \n  const data = useStaticQuery(graphql`\n      query Menu {\n        allPages: allMarkdownRemark(\n          filter: { fileAbsolutePath: {regex : \"/^((?!index).)*$/\"} },\n        ){ \n          edges {\n            node {\n              id\n              frontmatter {\n                title\n                category\n                priority\n              }\n              fields {\n                slug\n                contentType\n              }\n            }\n          }\n        }\n      }\n    `)\n  const dispatch = useContext(GlobalDispatchContext)\n  const state = useContext(GlobalStateContext)\n\n  const location = globalHistory.location.pathname\n  const useBreakpoint = createBreakpoint({ M: 1024, S: 768});\n\n  if(typeof window !== `undefined`) {\n    currentDirectory = location.split('/');\n    currentDirectory = currentDirectory.filter(item => item);\n    currentDirectory  = currentDirectory.slice(0, 1).join('/');\n  }\n  \n  const navigationItems = {\n    items: data.allPages.hasOwnProperty('edges')\n      ? data.allPages.edges.filter(items => (items.node.fields.contentType.includes(currentDirectory)))\n      : false\n  }\n  console.log(navigationItems)\n  const navigationStructure = _(navigationItems.items)\n  .chain()\n  .groupBy('node.frontmatter.category')\n  // .filter(key != 'noKategory')\n  .map((value, key) => ({ parentLink: key,  childLink: value}))\n  .value()\n \n  const navigationStructureSorted = _.orderBy(navigationStructure, [(item) => {\n    const nestedObj = _.get(item, 'childLink');\n    item['childLink'] = _.orderBy(nestedObj,['node.frontmatter.priority', 'node.frontmatter.title'],['asc', 'asc']);\n      return [item.parentLink, item['childLink']];\n    }], 'asc', 'asc');\n    console.log(navigationStructureSorted)\n  const breakpoint = useBreakpoint();\n  const [isOpen, setOpen] = useState(false);\n\n  const handleOnClick = () => {\n    setOpen(!isOpen)\n    document.body.style.overflow = 'hidden';\n     \n  }\n  const handleOnClickDesktop = () => {\n    dispatch({ type: \"TOGGLE_SIDENAV\" })\n  }\n  \n  const handleOverlayClick = () => {\n    setOpen(false)\n    document.body.style.overflow = 'unset';\n  }\n\n  const renderMenuItems = (nav, loc) =>\n    nav.map((item, index) => {\n      \n      return (\n        <MenuItem \n          item={item}\n          key={index}\n          className={style.Menu__item}\n          location={loc}\n          />\n      );\n    });\n    return (\n      <>\n          {\n            breakpoint === 'M'  ? (\n              <AnimationContainer show={state.isMenuOpenDesktop}>\n                <MenuToggle isOpen={state.isMenuOpenDesktop} onClick={handleOnClickDesktop} />\n              </AnimationContainer>\n            ) : (\n              <MenuToggle isOpen={isOpen} onClick={handleOnClick} />\n            )\n          } \n          <div role=\"button\" tabIndex={0} onClick={handleOverlayClick} onKeyDown={handleOverlayClick} className={cx(style.Menu__overlay, (isOpen ? style['Menu__overlay--isVisible'] : '' ))} />\n          \n          <Location>\n            {({ location }) => {\n              \n              return ( \n                <>\n                 { breakpoint === 'M'  ? (\n                <AnimationContainer show={state.isMenuOpenDesktop}>\n                <nav className={cx(style.Menu, (state.isMenuOpenDesktop ? style['Menu--isOpen'] : '' ))}>\n                  <ul className={style.Menu__list}>\n                    {renderMenuItems(navigationStructureSorted, location)}\n                  </ul>\n                </nav>\n                </AnimationContainer>\n                ) : (\n                  \n                    <nav className={cx(style.Menu, (isOpen ? style['Menu--isOpen'] : '' ))}>\n                        <ul className={style.Menu__list}>\n                          {renderMenuItems(navigationStructureSorted, location)}\n                        </ul>\n                    </nav>\n                  \n                ) \n                } \n                </>\n              )\n          }}\n        </Location>\n      \n      </>\n    );\n  \n}\n\nexport default Menu;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AAsBA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAFA;AAKA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAzDA;AAAA;AAAA;AACA;AA0DA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAXA;AACA;AAWA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAMA;AACA;AAlIA;AAGA;;;AAgIA;AAAA;;;;;;;;;;AAnIA;;;;;;;;;;;;;;A","sourceRoot":""}